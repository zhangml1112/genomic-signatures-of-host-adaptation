# Set working directories
data_dir <- "path/to/data/"
output_dir <- "path/to/output/"
setwd(output_dir)

# Load preprocessed gene matrix and metadata
gene_matrix <- read.table(file.path(data_dir, "gene_matrix.csv"), sep = ",", header = TRUE, row.names = 1)
gene_transposed_df <- read.table(file.path(data_dir, "gene_transposed_df.csv"), sep = ",", header = TRUE, row.names = 1)
gene_matrix$TraitY <- factor(gene_matrix$TraitY)

# Split data
set.seed(123)
train_idx <- sample(nrow(gene_matrix), nrow(gene_matrix) * 0.7)
gene_train <- gene_matrix[train_idx, ]
gene_test <- gene_matrix[-train_idx, ]

# LASSO regression
library(glmnet)
X_train <- as.matrix(gene_train[, -ncol(gene_train)])
y_train <- gene_train$TraitY
X_test <- as.matrix(gene_test[, -ncol(gene_test)])
y_test <- gene_test$TraitY

lasso_model <- cv.glmnet(X_train, y_train, family = "binomial", alpha = 1)
best_lambda <- lasso_model$lambda.min
cat("Best lambda:", best_lambda, "\n")

# Prediction and evaluation
lasso_pred <- predict(lasso_model, s = best_lambda, newx = X_test, type = "response")
lasso_pred_class <- ifelse(lasso_pred > 0.5, "1", "0")
lasso_conf_matrix <- table(Predicted = lasso_pred_class, Actual = y_test)
print(lasso_conf_matrix)
cat("Accuracy:", round(sum(diag(lasso_conf_matrix)) / sum(lasso_conf_matrix), 2), "\n")

# Extract non-zero coefficients
coef_lasso <- coef(lasso_model, s = best_lambda)
coef_df <- as.data.frame(as.matrix(coef_lasso))
coef_df$Feature <- rownames(coef_df)
important_features_df <- coef_df[coef_df$Feature != "(Intercept)" & coef_df$s1 != 0, ]
important_features_df <- important_features_df[order(abs(important_features_df$s1), decreasing = TRUE), ]
write.csv(important_features_df, file.path(output_dir, "lasso_important_features.csv"), row.names = FALSE)

# Plot LASSO regularization path
plot(lasso_model)

# Select top features
important_features <- important_features_df$Feature
top_features <- important_features[1:min(90, length(important_features))]

# Extract top features from original transposed matrix
gene_selected <- gene_transposed_df[, top_features]
gene_selected <- gene_selected[rowSums(gene_selected) > 0, ]

# PCoA analysis
library(vegan)
gene_dist <- vegdist(gene_selected, method = "canberra")
pcoa <- cmdscale(gene_dist, k = 2, eig = TRUE)
pcoa_df <- as.data.frame(pcoa$points)
colnames(pcoa_df) <- c("PCoA1", "PCoA2")

# Combine prediction for visualization
train_pred <- predict(lasso_model, s = best_lambda, newx = X_train, type = "response")
test_pred <- predict(lasso_model, s = best_lambda, newx = X_test, type = "response")
group_pred <- c(ifelse(train_pred > 0.5, "1", "0"), ifelse(test_pred > 0.5, "1", "0"))
names(group_pred) <- c(rownames(gene_train), rownames(gene_test))
pcoa_df$Group <- factor(group_pred[rownames(pcoa_df)])

# Compute AIC
lasso_fitted <- glmnet(X_train, y_train, family = "binomial", alpha = 1, lambda = best_lambda)
log_likelihood <- -deviance(lasso_fitted) / 2
non_zero_coefficients <- sum(coef_lasso != 0) - 1
aic_value <- -2 * log_likelihood + 2 * non_zero_coefficients
cat("AIC Value:", round(aic_value, 2), "\n")

# Plot PCoA with group colors
library(ggplot2)
ggplot(pcoa_df, aes(x = PCoA1, y = PCoA2, color = Group)) +
  geom_point(aes(shape = Group), size = 3, alpha = 0.5) +
  labs(title = paste("LASSO-selected Features: Gene Matrix\nAIC =", round(aic_value, 2)),
       x = paste0("PCoA1 (", round(pcoa$eig[1]/sum(pcoa$eig) * 100, 2), "%)"),
       y = paste0("PCoA2 (", round(pcoa$eig[2]/sum(pcoa$eig) * 100, 2), "%)")) +
  theme_bw() +
  scale_color_manual(values = c("1" = "#CC4D31", "0" = "#44abbb"),
                     labels = c("1" = "human", "0" = "environment")) +
  scale_shape_manual(values = c("1" = 16, "0" = 17),
                     labels = c("1" = "human", "0" = "environment"))

# Save figure
ggsave(file.path(output_dir, "lasso_pcoa_plot.pdf"), width = 5, height = 5)
